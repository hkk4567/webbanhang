// src/middlewares/errorHandler.js

const AppError = require('../utils/appError');

/**
 * X·ª≠ l√Ω l·ªói Sequelize Unique Constraint (l·ªói d·ªØ li·ªáu b·ªã tr√πng l·∫∑p).
 * @param {object} err - ƒê·ªëi t∆∞·ª£ng l·ªói t·ª´ Sequelize.
 * @returns {AppError} - M·ªôt ƒë·ªëi t∆∞·ª£ng AppError m·ªõi v·ªõi th√¥ng b√°o th√¢n thi·ªán.
 */
const handleUniqueConstraintError = (err) => {
    const errors = err.errors.map(el =>
        `Gi√° tr·ªã '${el.value}' cho tr∆∞·ªùng '${el.path}' ƒë√£ t·ªìn t·∫°i.`
    );
    const message = `D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. ${errors.join(' ')}`;
    return new AppError(message, 400); // 400: Bad Request
};

/**
 * X·ª≠ l√Ω l·ªói Sequelize Validation (v√≠ d·ª•: email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, tr∆∞·ªùng b·∫Øt bu·ªôc b·ªã thi·∫øu).
 * @param {object} err - ƒê·ªëi t∆∞·ª£ng l·ªói t·ª´ Sequelize.
 * @returns {AppError} - M·ªôt ƒë·ªëi t∆∞·ª£ng AppError m·ªõi.
 */
const handleValidationError = (err) => {
    const errors = Object.values(err.errors).map(el => el.message);
    const message = `D·ªØ li·ªáu nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá. ${errors.join('. ')}`;
    return new AppError(message, 400);
};

/**
 * X·ª≠ l√Ω l·ªói JWT kh√¥ng h·ª£p l·ªá.
 * @returns {AppError} - AppError v·ªõi th√¥ng b√°o l·ªói x√°c th·ª±c.
 */
const handleJWTError = () => new AppError('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!', 401);

/**
 * X·ª≠ l√Ω l·ªói JWT ƒë√£ h·∫øt h·∫°n.
 * @returns {AppError} - AppError v·ªõi th√¥ng b√°o l·ªói x√°c th·ª±c.
 */
const handleJWTExpiredError = () => new AppError('Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!', 401);

// H√†m g·ª≠i l·ªói trong m√¥i tr∆∞·ªùng Development
const sendErrorDev = (err, res) => {
    res.status(err.statusCode).json({
        status: err.status,
        error: err,
        message: err.message,
        stack: err.stack,
    });
};

// H√†m g·ª≠i l·ªói trong m√¥i tr∆∞·ªùng Production
const sendErrorProd = (err, res) => {
    // A) L·ªói c√≥ th·ªÉ d·ª± ƒëo√°n (operational), g·ª≠i th√¥ng b√°o cho client
    if (err.isOperational) {
        res.status(err.statusCode).json({
            status: err.status,
            message: err.message,
        });
        // B) L·ªói l·∫≠p tr√¨nh ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh: kh√¥ng r√≤ r·ªâ chi ti·∫øt
    } else {
        // 1) Log l·ªói ra console ƒë·ªÉ dev bi·∫øt
        console.error('üí• ERROR üí•', err);

        // 2) G·ª≠i m·ªôt th√¥ng b√°o chung chung cho client
        res.status(500).json({
            status: 'error',
            message: 'ƒê√£ c√≥ l·ªói x·∫£y ra tr√™n server.',
        });
    }
};

// Middleware x·ª≠ l√Ω l·ªói ch√≠nh
module.exports = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    if (process.env.NODE_ENV === 'development') {
        console.error(`L·ªói t·∫°i: ${req.method} ${req.originalUrl}`);
        sendErrorDev(err, res);
    } else if (process.env.NODE_ENV === 'production') {
        // T·∫°o m·ªôt b·∫£n sao c·ªßa l·ªói ƒë·ªÉ kh√¥ng thay ƒë·ªïi l·ªói g·ªëc
        let error = { ...err, name: err.name, message: err.message, errors: err.errors };

        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ v√† chuy·ªÉn ch√∫ng th√†nh l·ªói operational
        if (error.name === 'SequelizeUniqueConstraintError') error = handleUniqueConstraintError(error);
        if (error.name === 'SequelizeValidationError') error = handleValidationError(error);
        if (error.name === 'JsonWebTokenError') error = handleJWTError();
        if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

        sendErrorProd(error, res);
    }
};